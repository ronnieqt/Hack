// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean m_color;
    static Array m_two_to_the;  // 2**i, i = 0..15, serve as bit masks

    /** Initializes the Screen. */
    function void init() {
        var int i;
        let m_color = false;
        let m_two_to_the = Array.new(16);
        let m_two_to_the[0] = 1;
        let i = 1;
        while (i < 16) {
            let m_two_to_the[i] = m_two_to_the[i-1] + m_two_to_the[i-1];
            let i = i + 1;
        }
        do Screen.setColor(true);
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int address;
        let address = 16384;
        while (address < 24576) {
            do Memory.poke(address, 0);
            let address = address + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let m_color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, q, r;
        // illegal pixel coordinates
        if ((x < 0) | (x > 511) | (y < 0) | (y > 255)) {
            do Sys.error(7);
        }
        // local variable init
        let q = x / 16;
        let r = x - (q * 16);
        let address = 16384 + (32 * y) + q;  // 16384 + 32 * y + x / 16
        let value = Memory.peek(address);
        // set the (x%16)th bit of value to the current color
        if (m_color) {
            // set the (x%16)th bit
            let value = value | m_two_to_the[r];
        }
        else {
            // clear the (x%16)th bit
            let value = value & ~m_two_to_the[r];
        }
        do Memory.poke(address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x, y, dx, dy;
        // a and b track how many times we went right, and up, so far
        var int a, b, da, db, diff;
        // illegal line coordinates
        if (  ((x1 < 0) | (x1 > 511) | (y1 < 0) | (y1 > 255))
            | ((x2 < 0) | (x2 > 511) | (y2 < 0) | (y2 > 255))
        ) {
            do Sys.error(8);
        }
        // set x to x1, y to y1, compute dx and dy
        let x = x1;
        let y = y1;
        if (x1 < x2) {
            let dx = x2 - x1;
            let da = 1;
        }
        else {
            let dx = x1 - x2;
            let da = -1;
        }
        if (y1 < y2) {
            let dy = y2 - y1;
            let db = 1;
        }
        else {
            let dy = y1 - y2;
            let db = -1;
        }
        // a = 0, b = 0, diff = 0
        let a = 0;
        let b = 0;
        let diff = 0;
        while (~(a > dx) & ~(b > dy)) {
            do Screen.drawPixel(x+(a*da), y+(b*db));
            // goes along x or along y;
            if (~(dx = 0) & ~(dy = 0)) {
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                }
                else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
            else {
                if (dx = 0) { let b = b + 1; }
                if (dy = 0) { let a = a + 1; }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dy, y, y_end;
        // illegal rectangle coordinates
        if (  ((x1 < 0) | (x1 > 511) | (y1 < 0) | (y1 > 255))
            | ((x2 < 0) | (x2 > 511) | (y2 < 0) | (y2 > 255))
        ) {
            do Sys.error(9);
        }
        // draw lines
        if ((x1 = x2) | (y1 = y2)) {
            do Screen.drawLine(x1, y1, x2, y2);
        }
        else {
            if (y1 < y2) {
                let dy = 1;
            }
            else {  // y1 > y2
                let dy = -1;
            }
            let y = y1;
            let y_end = y2 + dy;
            while (~(y = y_end)) {
                do Screen.drawLine(x1, y, x2, y);
                let y = y + dy;
            }
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy;
        // illegal center coordinates
        if ((x < 0) | (x > 511) | (y < 0) | (y > 255)) {
            do Sys.error(12);
        }
        // illegal radius
        if ((r = 0) | (r < 0) | (r > 181)) {
            do Sys.error(13);
        }
        // local variables init
        let dy = -r;
        while (~(dy > r)) {
            let dx = Math.sqrt((r*r)-(dy*dy));
            do Screen.drawLine(x-dx, y+dy, x+dx, y+dy);
            let dy = dy + 1;
        }
        return;
    }
}
